{"ast":null,"code":"var _jsxFileName = \"/home/workspace/reactjs/coding-practices/reactAssessment/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { RotatingLines } from \"react-loader-spinner\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = \"https://apis.ccbp.in/list-creation/lists\"; // Replace with the actual API URL\n\nfunction App() {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [data, setData] = useState([]);\n  const [lists, setLists] = useState({});\n  const [listOrder, setListOrder] = useState([]); // To track list order\n  const [selectedLists, setSelectedLists] = useState([]);\n  const [newListView, setNewListView] = useState(false);\n  const [newListKey, setNewListKey] = useState(null); // Track new list number\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    setLoading(true);\n    setError(false);\n    try {\n      const response = await axios.get(API_URL);\n      const {\n        lists,\n        total\n      } = response.data; // Replace with actual response properties\n      const groupedLists = lists.reduce((acc, item) => {\n        if (!acc[item.list_number]) {\n          acc[item.list_number] = [];\n        }\n        acc[item.list_number].push(item);\n        return acc;\n      }, {});\n\n      // Set the lists and the order they should appear\n      const sortedListNumbers = Object.keys(groupedLists).sort((a, b) => a - b);\n      setData(lists);\n      setLists(groupedLists);\n      setListOrder(sortedListNumbers); // Save the order of list numbers\n      setLoading(false);\n    } catch (err) {\n      setError(true);\n      setLoading(false);\n    }\n  };\n  const handleRetry = () => {\n    fetchData();\n  };\n  const handleListSelection = listNumber => {\n    const updatedSelection = selectedLists.includes(listNumber) ? selectedLists.filter(num => num !== listNumber) : [...selectedLists, listNumber];\n    setSelectedLists(updatedSelection);\n  };\n  const handleCreateNewList = () => {\n    if (selectedLists.length !== 2) {\n      let alertForCheckEl = document.getElementById(\"alertForCheck\");\n      alertForCheckEl.textContent = \"*You should select exactly 2 lists to create a new list\";\n      return;\n    }\n\n    // Sort the selected list numbers to determine the correct order\n    const [firstList, secondList] = selectedLists.sort((a, b) => a - b);\n\n    // Determine the next available list number by checking the highest existing list number\n    const nextListNumber = Math.max(...Object.keys(lists).map(Number)) + 1;\n\n    // Set the new list key to be the next list number\n    const newListKey = nextListNumber.toString();\n    setNewListKey(newListKey);\n\n    // Insert the new list dynamically between the selected lists\n    setLists(prev => {\n      const updatedLists = {\n        ...prev\n      };\n      const newOrder = [];\n\n      // Find the correct insertion point for the new list\n      let inserted = false;\n      Object.keys(updatedLists).sort((a, b) => a - b).forEach(key => {\n        newOrder.push(key);\n        if (key === firstList.toString() && !inserted) {\n          newOrder.push(newListKey); // Insert new list after the first selected list\n          inserted = true;\n        }\n      });\n      const reorderedLists = {};\n      newOrder.forEach(key => {\n        reorderedLists[key] = updatedLists[key] || [];\n      });\n      reorderedLists[newListKey] = []; // Add an empty array for the new list (0 items)\n\n      return reorderedLists;\n    });\n    setListOrder(prevOrder => {\n      const newOrder = [...prevOrder];\n      const insertIndex = newOrder.indexOf(firstList.toString()) + 1; // Position after the first selected list\n      newOrder.splice(insertIndex, 0, newListKey); // Insert the new list in the order\n      return newOrder;\n    });\n    setNewListView(true); // Show the new list view\n  };\n  const handleMoveItem = (item, fromList) => {\n    // Check if the checkbox for the selected list is checked\n    const isChecked = selectedLists.includes(fromList);\n    console.log(isChecked);\n    if (isChecked) {\n      // Move item to the new list temporarily\n      setLists(prevLists => {\n        console.log(prevLists);\n        const updatedLists = {\n          ...prevLists\n        };\n\n        // Remove the item from the original list (fromList)\n        const updatedFromList = (updatedLists[fromList] || []).filter(i => i.id !== item.id);\n\n        // Ensure List 3 exists in the updated list\n        if (!updatedLists[\"3\"]) {\n          updatedLists[\"3\"] = [];\n        }\n\n        // Add the item to List 3\n        updatedLists[\"3\"].push(item);\n        return {\n          ...updatedLists,\n          [fromList]: updatedFromList // Update the original list by removing the item\n        };\n        console.log({\n          ...updatedLists,\n          [fromList]: updatedFromList // Update the original list by removing the item\n        });\n      });\n    } else {\n      alert(\"Please check the checkbox to select the list before moving items.\");\n    }\n  };\n  const handleCancel = () => {\n    setNewListView(false);\n    setSelectedLists([]); // Uncheck all checkboxes\n    fetchData();\n  };\n  const handleUpdate = () => {\n    setNewListView(false);\n    setSelectedLists([]); // Uncheck all checkboxes\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\",\n      children: /*#__PURE__*/_jsxDEV(RotatingLines, {\n        strokeColor: \"grey\",\n        strokeWidth: \"5\",\n        animationDuration: \"0.75\",\n        width: \"96\",\n        visible: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Failed to load data. Please try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 178,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRetry,\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"head-btn-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"main-heading\",\n          children: \"List Creation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"add-new-list-button\",\n          onClick: handleCreateNewList,\n          children: \"Create a New List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 185,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"alertForCheck\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 192,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 183,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `lists-container ${newListView ? \"row\" : \"\"}`,\n        children: newListView ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-creation-view\",\n            children: listOrder.map(listNumber => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"list\",\n              children: listNumber === newListKey ?\n              /*#__PURE__*/\n              // New list with heading, but empty content\n              _jsxDEV(\"div\", {\n                className: \"new-list-heading\",\n                children: /*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"List \", newListKey, \" (\", lists[newListKey].length, \")\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 203,\n                  columnNumber: 27\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 202,\n                columnNumber: 25\n              }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                  children: [\"List \", listNumber, \" (\", lists[listNumber].length, \" items)\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 210,\n                  columnNumber: 27\n                }, this), lists[listNumber].map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"list-item\",\n                  children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"name\",\n                    children: item.name\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 215,\n                    columnNumber: 31\n                  }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                    className: \"description\",\n                    children: item.description\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 216,\n                    columnNumber: 31\n                  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                    className: \"button-arrow\",\n                    children: listNumber === \"new\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                        className: \"arrow\",\n                        onClick: () => handleMoveItem(item, \"new\", selectedLists[1]) // Move item to the second selected list\n                        ,\n                        children: \"\\u21FD\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 223,\n                        columnNumber: 37\n                      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                        className: \"arrow\",\n                        onClick: () => handleMoveItem(item, \"new\", selectedLists[0]) // Move item to the first selected list\n                        ,\n                        children: \"\\u21FE\"\n                      }, void 0, false, {\n                        fileName: _jsxFileName,\n                        lineNumber: 236,\n                        columnNumber: 37\n                      }, this)]\n                    }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n                      onClick: () => handleMoveItem(item, listNumber, \"new\") // Move item to the new list\n                      ,\n                      children: \"\\u27A1\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 251,\n                      columnNumber: 35\n                    }, this)\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 220,\n                    columnNumber: 31\n                  }, this)]\n                }, item.id, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 214,\n                  columnNumber: 29\n                }, this))]\n              }, void 0, true)\n            }, listNumber, false, {\n              fileName: _jsxFileName,\n              lineNumber: 199,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 197,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleCancel,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 270,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleUpdate,\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 271,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-selection\",\n            children: listOrder.map(listNumber => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"list-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"check-heading\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  id: `myCheckbox + ${listNumber}`,\n                  type: \"checkbox\",\n                  checked: selectedLists.includes(listNumber),\n                  onChange: () => handleListSelection(listNumber)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 280,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: `myCheckbox + ${listNumber}`,\n                  className: \"list-head\",\n                  children: [\"List \", listNumber]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 286,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 23\n              }, this), lists[listNumber].map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"list-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"name\",\n                  children: item.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 295,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"description\",\n                  children: item.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 296,\n                  columnNumber: 27\n                }, this)]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 294,\n                columnNumber: 25\n              }, this))]\n            }, listNumber, true, {\n              fileName: _jsxFileName,\n              lineNumber: 278,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 276,\n            columnNumber: 17\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"nRgA0mx2AKhAQ4hu2MKtkmroUbk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","RotatingLines","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","App","_s","loading","setLoading","error","setError","data","setData","lists","setLists","listOrder","setListOrder","selectedLists","setSelectedLists","newListView","setNewListView","newListKey","setNewListKey","fetchData","response","get","total","groupedLists","reduce","acc","item","list_number","push","sortedListNumbers","Object","keys","sort","a","b","err","handleRetry","handleListSelection","listNumber","updatedSelection","includes","filter","num","handleCreateNewList","length","alertForCheckEl","document","getElementById","textContent","firstList","secondList","nextListNumber","Math","max","map","Number","toString","prev","updatedLists","newOrder","inserted","forEach","key","reorderedLists","prevOrder","insertIndex","indexOf","splice","handleMoveItem","fromList","isChecked","console","log","prevLists","updatedFromList","i","id","alert","handleCancel","handleUpdate","className","children","strokeColor","strokeWidth","animationDuration","width","visible","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","name","description","checked","onChange","htmlFor","_c","$RefreshReg$"],"sources":["/home/workspace/reactjs/coding-practices/reactAssessment/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { RotatingLines } from \"react-loader-spinner\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst API_URL = \"https://apis.ccbp.in/list-creation/lists\"; // Replace with the actual API URL\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [data, setData] = useState([]);\n  const [lists, setLists] = useState({});\n  const [listOrder, setListOrder] = useState([]); // To track list order\n  const [selectedLists, setSelectedLists] = useState([]);\n  const [newListView, setNewListView] = useState(false);\n  const [newListKey, setNewListKey] = useState(null); // Track new list number\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    setLoading(true);\n    setError(false);\n    try {\n      const response = await axios.get(API_URL);\n      const { lists, total } = response.data; // Replace with actual response properties\n      const groupedLists = lists.reduce((acc, item) => {\n        if (!acc[item.list_number]) {\n          acc[item.list_number] = [];\n        }\n        acc[item.list_number].push(item);\n        return acc;\n      }, {});\n\n      // Set the lists and the order they should appear\n      const sortedListNumbers = Object.keys(groupedLists).sort((a, b) => a - b);\n      setData(lists);\n      setLists(groupedLists);\n      setListOrder(sortedListNumbers); // Save the order of list numbers\n      setLoading(false);\n    } catch (err) {\n      setError(true);\n      setLoading(false);\n    }\n  };\n\n  const handleRetry = () => {\n    fetchData();\n  };\n\n  const handleListSelection = (listNumber) => {\n    const updatedSelection = selectedLists.includes(listNumber)\n      ? selectedLists.filter((num) => num !== listNumber)\n      : [...selectedLists, listNumber];\n    setSelectedLists(updatedSelection);\n  };\n\n  const handleCreateNewList = () => {\n    if (selectedLists.length !== 2) {\n      let alertForCheckEl = document.getElementById(\"alertForCheck\");\n      alertForCheckEl.textContent =\n        \"*You should select exactly 2 lists to create a new list\";\n      return;\n    }\n\n    // Sort the selected list numbers to determine the correct order\n    const [firstList, secondList] = selectedLists.sort((a, b) => a - b);\n\n    // Determine the next available list number by checking the highest existing list number\n    const nextListNumber = Math.max(...Object.keys(lists).map(Number)) + 1;\n\n    // Set the new list key to be the next list number\n    const newListKey = nextListNumber.toString();\n    setNewListKey(newListKey);\n\n    // Insert the new list dynamically between the selected lists\n    setLists((prev) => {\n      const updatedLists = { ...prev };\n      const newOrder = [];\n\n      // Find the correct insertion point for the new list\n      let inserted = false;\n      Object.keys(updatedLists)\n        .sort((a, b) => a - b)\n        .forEach((key) => {\n          newOrder.push(key);\n          if (key === firstList.toString() && !inserted) {\n            newOrder.push(newListKey); // Insert new list after the first selected list\n            inserted = true;\n          }\n        });\n\n      const reorderedLists = {};\n      newOrder.forEach((key) => {\n        reorderedLists[key] = updatedLists[key] || [];\n      });\n      reorderedLists[newListKey] = []; // Add an empty array for the new list (0 items)\n\n      return reorderedLists;\n    });\n\n    setListOrder((prevOrder) => {\n      const newOrder = [...prevOrder];\n      const insertIndex = newOrder.indexOf(firstList.toString()) + 1; // Position after the first selected list\n      newOrder.splice(insertIndex, 0, newListKey); // Insert the new list in the order\n      return newOrder;\n    });\n\n    setNewListView(true); // Show the new list view\n  };\n\n  const handleMoveItem = (item, fromList) => {\n    // Check if the checkbox for the selected list is checked\n    const isChecked = selectedLists.includes(fromList);\n    console.log(isChecked);\n\n    if (isChecked) {\n      // Move item to the new list temporarily\n      setLists((prevLists) => {\n        console.log(prevLists);\n        const updatedLists = { ...prevLists };\n\n        // Remove the item from the original list (fromList)\n        const updatedFromList = (updatedLists[fromList] || []).filter(\n          (i) => i.id !== item.id\n        );\n\n        // Ensure List 3 exists in the updated list\n        if (!updatedLists[\"3\"]) {\n          updatedLists[\"3\"] = [];\n        }\n\n        // Add the item to List 3\n        updatedLists[\"3\"].push(item);\n\n        return {\n          ...updatedLists,\n          [fromList]: updatedFromList, // Update the original list by removing the item\n        };\n        console.log({\n          ...updatedLists,\n          [fromList]: updatedFromList, // Update the original list by removing the item\n        });\n      });\n    } else {\n      alert(\n        \"Please check the checkbox to select the list before moving items.\"\n      );\n    }\n  };\n\n  const handleCancel = () => {\n    setNewListView(false);\n    setSelectedLists([]); // Uncheck all checkboxes\n    fetchData();\n  };\n\n  const handleUpdate = () => {\n    setNewListView(false);\n    setSelectedLists([]); // Uncheck all checkboxes\n  };\n\n  return (\n    <div className=\"App\">\n      {loading ? (\n        <div className=\"loader\">\n          <RotatingLines\n            strokeColor=\"grey\"\n            strokeWidth=\"5\"\n            animationDuration=\"0.75\"\n            width=\"96\"\n            visible={true}\n          />\n        </div>\n      ) : error ? (\n        <div className=\"error-view\">\n          <p>Failed to load data. Please try again.</p>\n          <button onClick={handleRetry}>Try Again</button>\n        </div>\n      ) : (\n        <div className=\"main-container\">\n          <div className=\"head-btn-container\">\n            <h1 className=\"main-heading\">List Creation</h1>\n            <button\n              type=\"button\"\n              className=\"add-new-list-button\"\n              onClick={handleCreateNewList}\n            >\n              Create a New List\n            </button>\n            <span id=\"alertForCheck\"></span>\n          </div>\n          <div className={`lists-container ${newListView ? \"row\" : \"\"}`}>\n            {newListView ? (\n              <div>\n                <div className=\"list-creation-view\">\n                  {listOrder.map((listNumber) => (\n                    <div className=\"list\" key={listNumber}>\n                      {listNumber === newListKey ? (\n                        // New list with heading, but empty content\n                        <div className=\"new-list-heading\">\n                          <h3>\n                            List {newListKey} ({lists[newListKey].length})\n                          </h3>\n                          {/* This list starts with 0 items */}\n                        </div>\n                      ) : (\n                        <>\n                          <h3>\n                            List {listNumber} ({lists[listNumber].length} items)\n                          </h3>\n                          {lists[listNumber].map((item) => (\n                            <div className=\"list-item\" key={item.id}>\n                              <span className=\"name\">{item.name}</span>\n                              <span className=\"description\">\n                                {item.description}\n                              </span>\n\n                              <div className=\"button-arrow\">\n                                {listNumber === \"new\" ? (\n                                  <>\n                                    <button\n                                      className=\"arrow\"\n                                      onClick={\n                                        () =>\n                                          handleMoveItem(\n                                            item,\n                                            \"new\",\n                                            selectedLists[1]\n                                          ) // Move item to the second selected list\n                                      }\n                                    >\n                                      ⇽\n                                    </button>\n                                    <button\n                                      className=\"arrow\"\n                                      onClick={\n                                        () =>\n                                          handleMoveItem(\n                                            item,\n                                            \"new\",\n                                            selectedLists[0]\n                                          ) // Move item to the first selected list\n                                      }\n                                    >\n                                      ⇾\n                                    </button>\n                                  </>\n                                ) : (\n                                  <button\n                                    onClick={\n                                      () =>\n                                        handleMoveItem(item, listNumber, \"new\") // Move item to the new list\n                                    }\n                                  >\n                                    ➡\n                                  </button>\n                                )}\n                              </div>\n                            </div>\n                          ))}\n                        </>\n                      )}\n                    </div>\n                  ))}\n                </div>\n\n                <div className=\"actions\">\n                  <button onClick={handleCancel}>Cancel</button>\n                  <button onClick={handleUpdate}>Update</button>\n                </div>\n              </div>\n            ) : (\n              <>\n                <div className=\"list-selection\">\n                  {listOrder.map((listNumber) => (\n                    <div key={listNumber} className=\"list-container\">\n                      <div className=\"check-heading\">\n                        <input\n                          id={`myCheckbox + ${listNumber}`}\n                          type=\"checkbox\"\n                          checked={selectedLists.includes(listNumber)}\n                          onChange={() => handleListSelection(listNumber)}\n                        />\n                        <label\n                          htmlFor={`myCheckbox + ${listNumber}`}\n                          className=\"list-head\"\n                        >\n                          List {listNumber}\n                        </label>\n                      </div>\n                      {lists[listNumber].map((item) => (\n                        <div className=\"list-item\" key={item.id}>\n                          <span className=\"name\">{item.name}</span>\n                          <span className=\"description\">\n                            {item.description}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  ))}\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}