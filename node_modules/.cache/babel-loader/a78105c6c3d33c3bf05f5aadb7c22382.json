{"ast":null,"code":"var _jsxFileName = \"/home/workspace/reactjs/coding-practices/reactAssessment/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { RotatingLines } from \"react-loader-spinner\";\nimport axios from \"axios\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst API_URL = \"https://apis.ccbp.in/list-creation/lists\"; // Replace with the actual API URL\n\nfunction App() {\n  _s();\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [data, setData] = useState([]);\n  const [lists, setLists] = useState({});\n  const [listOrder, setListOrder] = useState([]); // To track list order\n  const [selectedLists, setSelectedLists] = useState([]);\n  const [newListView, setNewListView] = useState(false);\n  const [newList, setNewList] = useState([]);\n  useEffect(() => {\n    fetchData();\n  }, []);\n  const fetchData = async () => {\n    setLoading(true);\n    setError(false);\n    try {\n      const response = await axios.get(API_URL);\n      const {\n        lists,\n        total\n      } = response.data; // Replace with actual response properties\n      const groupedLists = lists.reduce((acc, item) => {\n        if (!acc[item.list_number]) {\n          acc[item.list_number] = [];\n        }\n        acc[item.list_number].push(item);\n        return acc;\n      }, {});\n\n      // Set the lists and the order they should appear\n      const sortedListNumbers = Object.keys(groupedLists).sort((a, b) => a - b);\n      setData(lists);\n      setLists(groupedLists);\n      setListOrder(sortedListNumbers); // Save the order of list numbers\n      setLoading(false);\n    } catch (err) {\n      setError(true);\n      setLoading(false);\n    }\n  };\n  const handleRetry = () => {\n    fetchData();\n  };\n  const handleListSelection = listNumber => {\n    const updatedSelection = selectedLists.includes(listNumber) ? selectedLists.filter(num => num !== listNumber) : [...selectedLists, listNumber];\n    setSelectedLists(updatedSelection);\n  };\n  const handleCreateNewList = () => {\n    if (selectedLists.length !== 2) {\n      let alertForCheckEl = document.getElementById(\"alertForCheck\");\n      alertForCheckEl.textContent = \"*You should select exactly 2 lists to create a new list\";\n      return;\n    }\n\n    // Sort the selected list numbers to determine the correct order\n    const [firstList, secondList] = selectedLists.sort((a, b) => a - b);\n\n    // Generate a unique key for the new list\n    const newListKey = `${firstList}-${secondList}`;\n\n    // Insert the new list dynamically in between the selected lists\n    setLists(prev => {\n      const updatedLists = {\n        ...prev\n      };\n      const newOrder = [...listOrder]; // Copy the existing order\n      newOrder.push(newListKey); // Add the new list key at the end\n\n      const reorderedLists = {};\n      newOrder.forEach(key => {\n        reorderedLists[key] = updatedLists[key] || [];\n      });\n      reorderedLists[newListKey] = []; // Add an empty array for the new list\n\n      return reorderedLists;\n    });\n    setListOrder(prevOrder => [...prevOrder, newListKey]); // Update the list order\n    setNewListView(true);\n    setNewList([]);\n  };\n  const handleMoveItem = (item, fromList, toList) => {\n    setLists(prev => {\n      const updatedFromList = prev[fromList].filter(i => i.id !== item.id);\n      const updatedToList = [...prev[toList], item];\n      return {\n        ...prev,\n        [fromList]: updatedFromList,\n        [toList]: updatedToList\n      };\n    });\n  };\n  const handleCancel = () => {\n    setNewListView(false);\n    setSelectedLists([]); // Uncheck all checkboxes\n    fetchData();\n  };\n  const handleUpdate = () => {\n    setNewListView(false);\n    alert(\"List updated successfully!\");\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: loading ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"loader\",\n      children: /*#__PURE__*/_jsxDEV(RotatingLines, {\n        strokeColor: \"grey\",\n        strokeWidth: \"5\",\n        animationDuration: \"0.75\",\n        width: \"96\",\n        visible: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 120,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 9\n    }, this) : error ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"error-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Failed to load data. Please try again.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleRetry,\n        children: \"Try Again\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"head-btn-container\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"main-heading\",\n          children: \"List Creation\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"button\",\n          className: \"add-new-list-button\",\n          onClick: handleCreateNewList,\n          children: \"Create a New List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 137,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          id: \"alertForCheck\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 135,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `lists-container ${newListView ? \"row\" : \"\"}`,\n        children: newListView ? /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-creation-view\",\n            children: listOrder.map((listNumber, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"list\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: [\"List \", index + 1, \" (\", lists[listNumber].length, \" items)\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 152,\n                columnNumber: 23\n              }, this), lists[listNumber].map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"list-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"name\",\n                  children: item.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 157,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"description\",\n                  children: item.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 158,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"button-arrow\",\n                  children: listNumber === \"new\" ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"arrow\",\n                      onClick: () => handleMoveItem(item, \"new\", selectedLists[1]),\n                      children: \"\\u21FD\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 165,\n                      columnNumber: 33\n                    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                      className: \"arrow\",\n                      onClick: () => handleMoveItem(item, \"new\", selectedLists[0]),\n                      children: \"\\u21FE\"\n                    }, void 0, false, {\n                      fileName: _jsxFileName,\n                      lineNumber: 177,\n                      columnNumber: 33\n                    }, this)]\n                  }, void 0, true) : /*#__PURE__*/_jsxDEV(\"button\", {\n                    onClick: () => handleMoveItem(item, listNumber, \"new\"),\n                    children: \"\\u27A1\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 191,\n                    columnNumber: 31\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 162,\n                  columnNumber: 27\n                }, this)]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 156,\n                columnNumber: 25\n              }, this))]\n            }, listNumber, true, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"actions\",\n            children: [/*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleCancel,\n              children: \"Cancel\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 206,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: handleUpdate,\n              children: \"Update\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 207,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 205,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"list-selection\",\n            children: listOrder.map(listNumber => /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"list-container\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"check-heading\",\n                children: [/*#__PURE__*/_jsxDEV(\"input\", {\n                  id: `myCheckbox + ${listNumber}`,\n                  type: \"checkbox\",\n                  checked: selectedLists.includes(listNumber),\n                  onChange: () => handleListSelection(listNumber)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 216,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n                  htmlFor: `myCheckbox + ${listNumber}`,\n                  className: \"list-head\",\n                  children: [\"List \", listNumber]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 222,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 215,\n                columnNumber: 23\n              }, this), lists[listNumber].map(item => /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"list-item\",\n                children: [/*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"name\",\n                  children: item.name\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 231,\n                  columnNumber: 27\n                }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"description\",\n                  children: item.description\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 232,\n                  columnNumber: 27\n                }, this)]\n              }, item.id, true, {\n                fileName: _jsxFileName,\n                lineNumber: 230,\n                columnNumber: 25\n              }, this))]\n            }, listNumber, true, {\n              fileName: _jsxFileName,\n              lineNumber: 214,\n              columnNumber: 21\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 17\n          }, this)\n        }, void 0, false)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 117,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"+xypIccXfZQIXaqi3wBZK4t+h6A=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","RotatingLines","axios","jsxDEV","_jsxDEV","Fragment","_Fragment","API_URL","App","_s","loading","setLoading","error","setError","data","setData","lists","setLists","listOrder","setListOrder","selectedLists","setSelectedLists","newListView","setNewListView","newList","setNewList","fetchData","response","get","total","groupedLists","reduce","acc","item","list_number","push","sortedListNumbers","Object","keys","sort","a","b","err","handleRetry","handleListSelection","listNumber","updatedSelection","includes","filter","num","handleCreateNewList","length","alertForCheckEl","document","getElementById","textContent","firstList","secondList","newListKey","prev","updatedLists","newOrder","reorderedLists","forEach","key","prevOrder","handleMoveItem","fromList","toList","updatedFromList","i","id","updatedToList","handleCancel","handleUpdate","alert","className","children","strokeColor","strokeWidth","animationDuration","width","visible","fileName","_jsxFileName","lineNumber","columnNumber","onClick","type","map","index","name","description","checked","onChange","htmlFor","_c","$RefreshReg$"],"sources":["/home/workspace/reactjs/coding-practices/reactAssessment/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { RotatingLines } from \"react-loader-spinner\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nconst API_URL = \"https://apis.ccbp.in/list-creation/lists\"; // Replace with the actual API URL\n\nfunction App() {\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n  const [data, setData] = useState([]);\n  const [lists, setLists] = useState({});\n  const [listOrder, setListOrder] = useState([]); // To track list order\n  const [selectedLists, setSelectedLists] = useState([]);\n  const [newListView, setNewListView] = useState(false);\n  const [newList, setNewList] = useState([]);\n\n  useEffect(() => {\n    fetchData();\n  }, []);\n\n  const fetchData = async () => {\n    setLoading(true);\n    setError(false);\n    try {\n      const response = await axios.get(API_URL);\n      const { lists, total } = response.data; // Replace with actual response properties\n      const groupedLists = lists.reduce((acc, item) => {\n        if (!acc[item.list_number]) {\n          acc[item.list_number] = [];\n        }\n        acc[item.list_number].push(item);\n        return acc;\n      }, {});\n\n      // Set the lists and the order they should appear\n      const sortedListNumbers = Object.keys(groupedLists).sort((a, b) => a - b);\n      setData(lists);\n      setLists(groupedLists);\n      setListOrder(sortedListNumbers); // Save the order of list numbers\n      setLoading(false);\n    } catch (err) {\n      setError(true);\n      setLoading(false);\n    }\n  };\n\n  const handleRetry = () => {\n    fetchData();\n  };\n\n  const handleListSelection = (listNumber) => {\n    const updatedSelection = selectedLists.includes(listNumber)\n      ? selectedLists.filter((num) => num !== listNumber)\n      : [...selectedLists, listNumber];\n    setSelectedLists(updatedSelection);\n  };\n\n  const handleCreateNewList = () => {\n    if (selectedLists.length !== 2) {\n      let alertForCheckEl = document.getElementById(\"alertForCheck\");\n      alertForCheckEl.textContent =\n        \"*You should select exactly 2 lists to create a new list\";\n      return;\n    }\n\n    // Sort the selected list numbers to determine the correct order\n    const [firstList, secondList] = selectedLists.sort((a, b) => a - b);\n\n    // Generate a unique key for the new list\n    const newListKey = `${firstList}-${secondList}`;\n\n    // Insert the new list dynamically in between the selected lists\n    setLists((prev) => {\n      const updatedLists = { ...prev };\n      const newOrder = [...listOrder]; // Copy the existing order\n      newOrder.push(newListKey); // Add the new list key at the end\n\n      const reorderedLists = {};\n      newOrder.forEach((key) => {\n        reorderedLists[key] = updatedLists[key] || [];\n      });\n      reorderedLists[newListKey] = []; // Add an empty array for the new list\n\n      return reorderedLists;\n    });\n\n    setListOrder((prevOrder) => [...prevOrder, newListKey]); // Update the list order\n    setNewListView(true);\n    setNewList([]);\n  };\n\n  const handleMoveItem = (item, fromList, toList) => {\n    setLists((prev) => {\n      const updatedFromList = prev[fromList].filter((i) => i.id !== item.id);\n      const updatedToList = [...prev[toList], item];\n      return {\n        ...prev,\n        [fromList]: updatedFromList,\n        [toList]: updatedToList,\n      };\n    });\n  };\n\n  const handleCancel = () => {\n    setNewListView(false);\n    setSelectedLists([]); // Uncheck all checkboxes\n    fetchData();\n  };\n\n  const handleUpdate = () => {\n    setNewListView(false);\n    alert(\"List updated successfully!\");\n  };\n\n  return (\n    <div className=\"App\">\n      {loading ? (\n        <div className=\"loader\">\n          <RotatingLines\n            strokeColor=\"grey\"\n            strokeWidth=\"5\"\n            animationDuration=\"0.75\"\n            width=\"96\"\n            visible={true}\n          />\n        </div>\n      ) : error ? (\n        <div className=\"error-view\">\n          <p>Failed to load data. Please try again.</p>\n          <button onClick={handleRetry}>Try Again</button>\n        </div>\n      ) : (\n        <div className=\"main-container\">\n          <div className=\"head-btn-container\">\n            <h1 className=\"main-heading\">List Creation</h1>\n            <button\n              type=\"button\"\n              className=\"add-new-list-button\"\n              onClick={handleCreateNewList}\n            >\n              Create a New List\n            </button>\n            <span id=\"alertForCheck\"></span>\n          </div>\n          <div className={`lists-container ${newListView ? \"row\" : \"\"}`}>\n            {newListView ? (\n              <div>\n                <div className=\"list-creation-view\">\n                  {listOrder.map((listNumber, index) => (\n                    <div className=\"list\" key={listNumber}>\n                      <h3>\n                        List {index + 1} ({lists[listNumber].length} items)\n                      </h3>\n                      {lists[listNumber].map((item) => (\n                        <div className=\"list-item\" key={item.id}>\n                          <span className=\"name\">{item.name}</span>\n                          <span className=\"description\">\n                            {item.description}\n                          </span>\n\n                          <div className=\"button-arrow\">\n                            {listNumber === \"new\" ? (\n                              <>\n                                <button\n                                  className=\"arrow\"\n                                  onClick={() =>\n                                    handleMoveItem(\n                                      item,\n                                      \"new\",\n                                      selectedLists[1]\n                                    )\n                                  }\n                                >\n                                  ⇽\n                                </button>\n                                <button\n                                  className=\"arrow\"\n                                  onClick={() =>\n                                    handleMoveItem(\n                                      item,\n                                      \"new\",\n                                      selectedLists[0]\n                                    )\n                                  }\n                                >\n                                  ⇾\n                                </button>\n                              </>\n                            ) : (\n                              <button\n                                onClick={() =>\n                                  handleMoveItem(item, listNumber, \"new\")\n                                }\n                              >\n                                ➡\n                              </button>\n                            )}\n                          </div>\n                        </div>\n                      ))}\n                    </div>\n                  ))}\n                </div>\n                <div className=\"actions\">\n                  <button onClick={handleCancel}>Cancel</button>\n                  <button onClick={handleUpdate}>Update</button>\n                </div>\n              </div>\n            ) : (\n              <>\n                <div className=\"list-selection\">\n                  {listOrder.map((listNumber) => (\n                    <div key={listNumber} className=\"list-container\">\n                      <div className=\"check-heading\">\n                        <input\n                          id={`myCheckbox + ${listNumber}`}\n                          type=\"checkbox\"\n                          checked={selectedLists.includes(listNumber)}\n                          onChange={() => handleListSelection(listNumber)}\n                        />\n                        <label\n                          htmlFor={`myCheckbox + ${listNumber}`}\n                          className=\"list-head\"\n                        >\n                          List {listNumber}\n                        </label>\n                      </div>\n                      {lists[listNumber].map((item) => (\n                        <div className=\"list-item\" key={item.id}>\n                          <span className=\"name\">{item.name}</span>\n                          <span className=\"description\">\n                            {item.description}\n                          </span>\n                        </div>\n                      ))}\n                    </div>\n                  ))}\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}